@{
    ViewBag.Title = "Strict Mode";
}
<h2>How to Write for Strict Mode</h2>
<p>In loosey goosey mode you write what ever and I try to figure out what you meant. I'm often wrong.</p>

<p>In strict mode, you annote your text enough for the parser to detect numbers, neologisms, foreign words, prepositions and so on.</p>

<h2>Rules</h2>
<ol>
    <li>Numbers are prefixed with #, e.g. #luka li nanpa.</li>
    <li>Neologisms are prefixed with +, e.g. +nupa li nimi sin.</li>
    <li>Foreign words are wrapped in double quotes, e.g. "Cromulent"</li>
    <li>Prepositions are lead by a comma, e.g. mi, lon ma Mewika. jan li, tawa ma Mewika.</li>
    <li>Prepositions can also start with ~, e.g. ~lon, ~sama, ~poka</li>
    <li>Compound words are joined by -, e.g. jan-pona</li>
    <li>Direct quotes are in single quotes, e.g. jan li toki e ni: 'ale li pona.'</li>
</ol>

<h2>Numbers</h2>
<p>
    There are lots and lots of community proposals for numbers. I support Stupid, Half-Stupid, Poman, and Body numbers. You can learn more about <a href="http://tokipona.net/tp/Numbers.aspx">half-stupid numbers here</a>.
</p>
<p>The parser works best with explicit numbers, i.e. #wan, #luka, #luka-wan. If you don't use explicit numbers, you can get better results by specifying what number system you are using.</p>
<h2>Stupid</h2>
<ul>
    <li>0: ala</li>
    <li>1: wan</li>
    <li>2: tu</li>
    <li>3: tu wan.  Select numbers from above, until they add up to your target number.</li>
    <li>(mute isn't really a number)</li>
</ul>
<h2>Stupid/Poman</h2>
<p>Poman are the same as below, except you capitalize and use only the first letter, eg. AAMMTW = 100+100+20+20+2+1 = 243.</p>
<ul>
    <li>0: ala</li>
    <li>1: wan</li>
    <li>2: tu</li>
    <li>3: tu wan</li>
    <li>4: tu tu</li>
    <li>5: luka</li>
    <li>6: luka wan</li>
    <li>7: luka tu</li>
    <li>8: luka tu wan</li>
    <li>9: luka tu tu</li>
    <li>10: luka luka</li>
    <li>20: mute</li>
    <li>100: ali or ale</li>
</ul>

<h2>Body</h2>
<p>This system has no particular blessing, no evidence of use by anyone but me as of 2014. It happened to be easier to pick any system than to have to deal with the above systems or pretend that numbers don't show up in real life translation exercises.</p>
<p>At the moment, until I have no names for place holders.</p>
<p>It is still recommended to write numbers as #123 instead of #nena-oko-kute or #wan-tu-kute. Definitely anything over 100 should be written in Arabic numbers. If you use body numbers, you just about have to write them explicitly. There isn't an easy way to infer implicit body numbers. (Even luka, mute, ale are challenging to identify correctly in half stupid numbers.)</p>
<ul>
    <li>0: ala</li>
    <li>1: nena or wan</li>
    <li>2: oko or tu</li>
    <li>3: kute</li>
    <li>4: uta</li>
    <li>5: luka</li>
    <li>6: insa</li>
    <li>7: monsi</li>
    <li>8: palisa or lupa</li>
    <li>9: noka</li>
</ul>


<h2>Punctuating Input</h2>
<p>Also, the status of prepositional phrases as modifiers is undefined and they make things hard to parse right now. So if you have a prepositional phrase modifier, especially in the subject phrase, join it with dashes, e.g. jan lon-ma-mi li jo e mani suli. I can sometimes normalize vocatives correctly, but if you can put period, colon, question or exclamation mark, vocatives will parse better. If sentences don't have terminating punctuation, I assume it is a run on sentence. I can't easily guess that a sentence has ended just because of white space, a blank line, parenthesis or so on. The problem is especially acute with titles, conversational fragments and poetry.  Also, the parser has a hard time dealing with elipses, such as, mi wile e .... --- Which I suppose could happen in conversation, but the parser thinks the string has terminated early.</p>

<h2>Edgy toki pona</h2>
<p>I like to write edgy toki pona, but the parser can't deal with it. Example include: compound prepositions, transformatives, noun phrases in the verb phrase, intentional and accidental subordinate clasues (I'm going to have to get back with an example), nor "mixed modifiers" that use en to join modifiers, e.g. kule pi laso en pimeja.</p>


<h2>Bracket Help</h2>
<h2>Phrase Brackets</h2>
<ul>
    <li><b>[subject]</b> - Everything right of the li.</li>
    <li><b>&lt;predicate&gt;</b> - the verb or noun phrase after li</li>
    <li><b>\modal/</b></li>
    <li><b>%verb</b> - the head verb</li>
    <li><b>\adverb/</b> - things following the head verb</li>
    <li><b>(modifier modifier)</b> - words after a head</li>
    <li><b>(- simple chain -)</b> - phrases all joined by the same particle, i.e. this is words and one sort of particle, e.g. just pi (not a combo of pi and en)</li>
    <li><b>{ complex chain }</b> - simple chains joined by another particle, for example, pi and en appear in the same phrase</li>
    <li><b>[{(- sina -) en (- jan (ante) pi toki-pona -)}]</b>-- brackets for a en/pi chain.</li>
    <li><b>|taso|</b> - "tag conjunction", "tagged words", question tag, yes no tags on the verb, intensifier tags (mostly just kin)</li>
    <li><b>{kin} la</b> - la fragment(s)</li>
</ul>
<h2>Part of Speech markers</h2>
<ul>
    <li><b>, preposition</b> - forces parser to read word as preposition</li>
    <li><b>~preposition</b> - internal/alternative symbol for marking prepositions</li>
    <li><b>#number</b> - Explict number. A complete explicit number has dashes instead of spaces, e.g. #tu-wan</li>
    <li><b>+wala</b> - Explicit neologism</li>
    <li><b>jan-pona</b> - compound phrase, i.e. noun and verb phrases that must gloss as a single unit to be coherent.</li>
</ul>
<p>
    What are tags. They are undeliminted, i.e. not set off from other phrases by particles like pi, e, li, etc.  They have a scope that can be unusual. I don't know how to describe it.
    When a word is tagged, that word can pop up anywhere that a word can. Perfect example is anu X and ala in the verb phrase. To not invent the concept of tagged words is to suggest the
    verb paradigm has a slot in between each word for an anu X or ala.
</p>
<p>
    Close related to tagged words are conjunction tags, which sit at the front of a sentence, undeliminated from the subject and the anu seme tag, which sits
    at the end of a sentence without deliminators from what ever might have gone before.
</p>

<h2>What is this</h2>
<p>The parser translates tp text into C# data structures. From this I can do a variety of experiments, such as sentence diagramming, glossing to English, spell checking, and grammar checking. After the text has been converted to an object-oriented data structure, I can convert it back to a toki pona string. When the code is bug free, it will be nearly identical. Right now, there are bugs and I lose white space and punctuation when converting back to toki pona.</p>

<h2>Normalization</h2>
<p>
    TP has two design mistakes. First, there is extensive overlap between content and function words. The difference between content and function words is like porn, you know it when you see it. Function words in tp are pi, li, la, e, and the six prepositions. The prepositions can be used as nouns and verbs, the pi, li la, e particles can't. In normalization, I make best guesses at what is being used as a preposition.
</p>
<p>The other mistake was dropping li from mi/sina. It makes parsing more difficult and the language isn't any more concise. So I also normalize by putting back the missing li. People can do this effortlessly, computers do it poorly.</p>

<h2>Implicit vs Explicit Part of Speech</h2>
<p>Some part of speech types are really hard to identify, but if you add some annotation, the task is much easier. This includes neologism, prepositions, numbers, foreign text, numbers and a few more categories.</p>

<h2>Glossing</h2>
<p>In glossing, I look up words by part of speech and pick one alternative at random. I'm starting with the jan Sonja classic dictionary, which to my surprise is actually missing a lot of entries. Most content words can be plausibly used in all POS, but are only defined for a few. This used to lead to arguments. Right now it leads to [square bracketed] error messages. </p>

<h2>Grammar Checking</h2>
<p>I can detect things like extra li after mi, too few words after pi, missing li, missing e, but not always. Often bad grammar is missing particles, which looks like a long string of modifiers.</p>

