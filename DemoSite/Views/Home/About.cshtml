@{
    ViewBag.Title = "About";
}
<h2>@ViewBag.Title.</h2>
<h3>@ViewBag.Message</h3>

<p>The parser translates tp text into C# data structures. From this I can do a variety of experiments, such as sentence diagramming, glossing to English, spell checking, and grammar checking. After the text has been converted to an object-oriented data structure, I can convert it back to a toki pona string. When the code is bug free, it will be nearly identical. Right now, there are bugs and I lose white space and punctuation when converting back to toki pona.</p>

<h2>Normalization</h2>
<p>
    TP has two design mistakes. First, there is extensive overlap between content and function words. The difference between content and function words is like porn, you know it when you see it. Function words in tp are pi, li, la, e, and the six prepositions. The prepositions can be used as nouns and verbs, the pi, li la, e particles can't. In normalization, I make best guesses at what is being used as a preposition.
</p>
<p>The other mistake was dropping li from mi/sina. It makes parsing more difficult and the language isn't any more concise. So I also normalize by putting back the missing li. People can do this effortlessly, computers do it poorly.</p>

<h2>Implicit vs Explicit Part of Speech</h2>
<p>Some part of speech types are really hard to identify, but if you add some annotation, the task is much easier. This includes neologism, prepositions, numbers, foreign text, numbers and a few more categories.</p>

<h2>Glossing</h2>
<p>In glossing, I look up words by part of speech and pick one alternative at random. I'm starting with the jan Sonja classic dictionary, which to my surprise is actually missing a lot of entries. Most content words can be plausibly used in all POS, but are only defined for a few. This used to lead to arguments. Right now it leads to [square bracketed] error messages. </p>

<h2>Grammar Checking</h2>
<p>I can detect things like extra li after mi, too few words after pi, missing li, missing e, but not always. Often bad grammar is missing particles, which looks like a long string of modifiers.</p>

